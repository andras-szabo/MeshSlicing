1. Slicing a single triangle.

=== Create triangle
o Create said triangle from code.
o Add mesh renderer with default material, make sure it shows up.

=== Slice said triangle
o transform cut coordinates into object space
	o well, first, let's _get_ said cut coordinates, via 2 mouse clicks-?
	o then actually transform them	
o calculate cut normal
	o forgot that we're technically in 3d now. so:
		o just rotate around _local_ forward

o calculate intersections Iab, Ibc, Iac
o reject if there are no 2 intersections
o decide which kind of cut it is
o create new meshes based on that

=== Make it look pretty
o add rigidbody, mesh collider ?

=== Now, slice a quad, or something that has more triangles.
o so how about this:
	o iterate through all triangles in a mesh.
		- decide if a tri is above or below the cut.
		- if it's not cut, just copy it to the new mesh (above or below).
			- so yeah, new meshes will have separate tris, always, so maybe we can optimize later
		- if it's cut, then:
			- copy the appropriate parts to the appropriate meshes (above or below)

	o profit.
	o o.c. probably lot of optimizations could be made, but let's just do this to see if it works.
	o yes it does ^_^

+ cover the insides, as if the cut objects were solid
+ apply it dynamically to whatever
+ further optimalizations
+ interpolate normals
+ interpolate UVs
+ reject not full slices
