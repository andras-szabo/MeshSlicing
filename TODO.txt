1. Slicing a single triangle.

=== Create triangle
o Create said triangle from code.
o Add mesh renderer with default material, make sure it shows up.

=== Slice said triangle
o transform cut coordinates into object space
	o well, first, let's _get_ said cut coordinates, via 2 mouse clicks-?
	o then actually transform them	
o calculate cut normal
	o forgot that we're technically in 3d now. so:
		o just rotate around _local_ forward

o calculate intersections Iab, Ibc, Iac
o reject if there are no 2 intersections
o decide which kind of cut it is
o create new meshes based on that

=== Make it look pretty
o add rigidbody, mesh collider ?

=== Now, slice a quad, or something that has more triangles.
o so how about this:
	o iterate through all triangles in a mesh.
		- decide if a tri is above or below the cut.
		- if it's not cut, just copy it to the new mesh (above or below).
			- so yeah, new meshes will have separate tris, always, so maybe we can optimize later
		- if it's cut, then:
			- copy the appropriate parts to the appropriate meshes (above or below)

	o profit.
	o o.c. probably lot of optimizations could be made, but let's just do this to see if it works.
	o yes it does ^_^

= to 0.1:
o fix normals
o do a donut
o add some small force to make it look woah
o add some coloured material
o slice all the things?
	- when the slice is set, cast rays
		- from start
		- from end
		- in between in reasonable steps - what's reasonable tho?
	- slice things that are hit

+ cover the insides, as if the cut objects were solid
+ better cut plane
+ apply it dynamically to whatever
+ further optimalizations
+ interpolate normals
+ interpolate UVs
+ reject not full slices

// OK, triangulation things; ear clipping; David Eberly https://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf

- an ear:
	- a triangle formed by 3 consecutive vertices v0, v1 and v2, where:
		- v1 is a convex angle, and
		- v0 -> v2 lies completely inside the polygon, and
		- no vertices of the polygon are contained in the triangle other than its own 3 vertices.

-idea:
	= if the polygon has more than 3 vertices, find an ear and clip it.
	= now you have a polygon with n-1 vertices; repeat.

	= this would be cubic complexity. why?
		- give me next 3 verts
		- for the tri, check if any other points are in the triangle.
			= so that's ~n * n.
		- if it's an ear - which it's bound to be, start from scratch.
		- so again give me the next 3 verts ...
				= this is the 3rd factor.

	= we can reduce it to quadratic.	
		= store polygon as a doubly linked list.
		= for each polygon, calc. angle, and put reflex-angle vertices
		  onto a separate list as well
		= let's also have a separate list for the convex-angle vertices
		= and calculate list of initial ear tips onto yet another list

		(= finding ears:
			= for each tri, check if any other vertex is inside
				= but for the "inside" check, it's enough to consider reflex vertices ( > PI rad).)

		= then remove ears one at a time.
		= when an ear is removed, what happens to the adjacent vertices?
			= if the adjacent vertex is convex, it will stay convex.
			= if an adjacent vertex was reflex, it may become convex, it may become an ear.
			
			=> so if, after the removal of an ear, any adjacent vertex is convex, you need to
			   check if that one is an ear now.

	= so e.g., suppose that at start:
		Convex vertices: { 0, 1, 3, 4, 6, 9 }	
		Reflex vertices: { 2, 5, 7, 8 }
		Initial ears:    { 3, 4, 6, 9 }

	= First, remove (2-3-4), that's one tri in the bag. new polygon is : 0, 1, 2, 4, 5, 6, 7, 8, 9.
	= Then check adjacent vertices:
		= 2 was reflex.
			= we have to check: it still is reflex, nothing to do.
		= 4 was an ear.
			= we have to check, is it still an ear? yes. good. ear list now: {4, 6, 9}.

	= Then remove the next ear: (2-4-5). That's another tri. new polygon: 0, 1, 2, 5, 6, 7, 8, 9.
	= 2 was reflex, and still is, nothing to do after the check.
	= 5 was reflex, but now it's convex. so we need to check: is it an ear? yes.
		=> remove it from list of reflex vertices, add it to ears.

	= next ear (2-5-6) is removed. That's another tri. new polygon: 0, 1, 2, 6, 7, 8, 9.
	= 2 was reflex, but now it's convex.
		= we need to check if it's an ear, but it is not.
		= remove 2 from convex list and add it to reflex, but otherwise nothing to do.
	= 6 was an ear.
		= check: it's still an ear.

	= next ear (2-6-7) is removed. That's another tri. new polygon: 0, 1, 2, 7, 8, 9
		= 2 was convex, and still is. 
			= but it's an ear now! add it to the end of the ear list. ear list now: { 9, 2 }
		= 7 was reflex, and it still is.
		
	= next ear (8-9-0) is removed.
		= 8 was reflex, but now convex.
			= it's an ear. => add it to ear list.
		= 0 was convex, and it still is
			= but it's now an ear => add it to the ear list. ear list now: 2, 8, 0

	... and there you have it.


= with holes:
	= the basic idea is to connect the holes to the outer polygon via two
	  "mutually visible" vertices that connect through two invisible edges.
		= then there's an algorithm for finding "mutually visible" 
		  vertices, but I think it may be a bit overcomplicated

o ok so step 0 for this:
	o is a point within a triangle? let's do this.

- then, ear clipper algorithm
	o get ordered list of points
	(- for holes, get: 1) ordered list of external, 2) counter-ordered list of holes)
	o identify ears

- then:
	- do we have more than 3 vertices left?
		- if so, remove an ear. this is one tri in the bag.
		- recalculate PolyVerts.
			- identify previous:
				- previous => next = curr.next.
			- identify next:
				- next=>previous = previous
		- check previous vertex.
		- check next vertex.

- ok, holes, how to?
	- have one list of CW: outer
	- have one list of CCW: inner
	- find "mutually visible" vertex?
		- pick to adjacent vertices on the hole.
			- pick a vertex on the outer ring.
			- check if the triangle formed by these three contains any
			  point of the inner, or any point of the outer.
			- if it does, then pick next outer vertex, until you've seen
			  all, at which point pixk next two adjacent vertices on the
			  inner ring.
			- if it doesn't, then we found mutually visible vertices.
			
	= so actually this above method is not 100% correct. there can be that a
	  "visibility triangle" doesn't contain any other points, but it's still wrong
	  because its edges intersect other edges. So we need to do better than this.
